# Add a description


class CohomologyPartialFlagVariety:
    def __init__(self, dynkin, parabolic, base=QQ):

        self.root_system = RootSystem(CartanType(dynkin))
        self.root_lattice = self.root_system.root_lattice()
        self.weyl_group = self.root_lattice.weyl_group(prefix="s")

        self.parabolic = tuple(sorted(set(parabolic)))
        assert set(self.parabolic).issubset(self.root_system.index_set()), \
                "parabolic subgroup must be specified by a subset of the index set of the root system"
        self.nonparabolic = tuple([j for j in CartanType(dynkin).index_set() if j not in parabolic])

        # the underlying module of cohomology over the base, freely generated by Schubert classes
        if dynkin in precomputed and parabolic in precomputed[dynkin]:
            self.schubert_basis = [self.weyl_group.from_reduced_word(item) for item in precomputed[dynkin][parabolic]]

        else:
            self.schubert_basis = list(set([w.coset_representative(self.nonparabolic) for w in self.weyl_group]))

        self.schubert_basis = sorted(self.schubert_basis, key=lambda s: s.length())

        self.module = CombinatorialFreeModule(base, self.schubert_basis)

        # the dimension of the partial flag variety
        self.dimension = max(w.length() for w in self.schubert_basis)

        # the top degree Schubert class (= class of a point)
        for w in self.schubert_basis:
            if w.length() == self.dimension:
                self.point_class = self.module.monomial(w)



    def __repr__(self):
        """Description of the cohomology ring"""
        return "Cohomology ring for %s / P_%s: \n%s" % \
                (self.root_system.cartan_type(), self.parabolic, self.root_system.dynkin_diagram())


    def cup_product(self, element_one, element_two, style = 'chaput-perrin', doublecheck = False):

        # if element_one or element_two is zero we are done
        if element_one.is_zero() or element_two.is_zero():
            return self.module.zero()

        # if element_one is a sum of at least two monomials we recurse
        if len(element_one.monomials()) > 1:
            term_one = element_one.leading_term()
            return self.cup_product(term_one, element_two, style, doublecheck) + self.cup_product(element_one - term_one, element_two, style, doublecheck)

        # if element_two is a sum of at least two monomials we recurse
        if len(element_two.monomials()) > 1:
            term_two = element_two.leading_term()
            return self.cup_product(element_one, term_two, style, doublecheck) + self.cup_product(element_one, element_two - term_two, style, doublecheck)

        # now we can apply the Littlewood-Richardson rule
        a = element_one.leading_support()
        b = element_two.leading_support()

        output = self.module.zero()

        for c in self.schubert_basis:
            if c.length() == a.length() + b.length():
                output = output + self.lrcoeff(a, b, c, style, doublecheck)*self.module(c)


        return element_one.leading_coefficient()*element_two.leading_coefficient()*output

    def lrcoeff(self, u, v, w, style = 'chaput-perrin', doublecheck = False):

        assert all([u in self.schubert_basis, v in self.schubert_basis, w in self.schubert_basis]), 'Input must be an element of self.schubert_basis'
        if style == 'thomas-yong':
            assert self.is_minuscule() or self.is_cominuscule(), 'The homogeneous space is not (co)minuscule'
        if style == 'chaput-perrin':
            assert self.is_minuscule_element(w) or self.is_cominuscule_element(w), 'w in lrcoeff(u,v,w) must be (co)minuscule'

        if all([u.bruhat_le(w), v.bruhat_le(w)]) == False:
            return 0

        else:

            if style == 'chaput-perrin':

                # fix a reduced word for w
                reduced_word_w = w.reduced_word() # DO WE REALLY NEED THIS?

                elements = list(range(w.length()))
                relations = [[i,j] for i in range(w.length()) for j in range(w.length()) if i > j and self.weyl_group.coxeter_matrix()[reduced_word_w[i],reduced_word_w[j]] != 2]

                ambient_poset = Poset([elements, relations], facade = False)

                straight_shapes = []

                for ideal in ambient_poset.order_ideals_lattice():
                    straight_shapes.append([ambient_poset.unwrap(item) for item in list(ambient_poset.order_ideals_lattice().unwrap(ideal))])

                ideal_to_schubert = dict([tuple([ambient_poset.subposet(shape), self.weyl_group.from_reduced_word([reduced_word_w[ambient_poset.unwrap(i)] for i in ambient_poset.subposet(shape).dual().list()])]) for shape in straight_shapes])
                schubert_to_ideal = dict([tuple([self.weyl_group.from_reduced_word([reduced_word_w[ambient_poset.unwrap(i)] for i in ambient_poset.subposet(shape).dual().list()]), ambient_poset.subposet(shape)]) for shape in straight_shapes])

            if style == 'thomas-yong':

                ambient_poset = self.root_lattice.root_poset().subposet(self.root_lattice.nonparabolic_positive_roots(self.nonparabolic))

                straight_shapes = [w.inversions(inversion_type = 'roots') for w in self.schubert_basis]

            def schubert_to_shape(u):

                assert u in self.schubert_basis

                if style == 'chaput-perrin':
                    return [ambient_poset.unwrap(item) for item in schubert_to_ideal.get(u).list()]

                if style == 'thomas-yong':
                    return u.inversions(inversion_type = 'roots')


            # A skew shape is a set-theoretic difference of straight shapes. We
            # store them as lists as well. A standard filling of a skew shape is
            # a bijective labelling of its elements by the numbers 1, 2, 3, ...
            # compatible with the partial order on the ambient_poset. These labelled
            # skew shapes are called standard tableaux. To work with such labellings,
            # i.e. with standard tableaux, we proceed as follows: every standard tableau
            # is stored as a dictionary, whose keys are all the elements of the ambient_poset,
            # where the labelling is extended to the whole ambient_poset by zero values.
            def skew_shape(T):

                # check input (input should be a dictionary with keys in ambient_poset)

                return [u for u in T.keys() if T.get(u) != 0]

            # given a standard tableau T, need to find the boxes that can be used in the Jeu De Taquin
            def list_of_allowed_x(T):

                # check input (input should be a dictionary with keys in ambient_poset)

                candidates = []

                for alpha in skew_shape(T):
                    for beta in ambient_poset.lower_covers(alpha):
                        if ambient_poset.unwrap(beta) not in skew_shape(T):
                            if ambient_poset.unwrap(beta) not in candidates:
                                candidates.append(ambient_poset.unwrap(beta))

                return [ambient_poset.unwrap(item) for item in ambient_poset.subposet(candidates).maximal_elements()]


            # jeu de taquin slide of T into x
            # this process takes several steps (page 3 in the preprint)
            def jeu_de_taquin(T,x):

                assert x in list_of_allowed_x(T), 'not allowed x in jdt'

                output = T.copy()

                candidates_for_y = [alpha for alpha in skew_shape(T) if alpha in [ambient_poset.unwrap(beta) for beta in ambient_poset.upper_covers(x)]]

                while len(candidates_for_y) > 0:
                    # taking as new y the element with the minimal label (as on page 3 of [Thomas-Yong])
                    inverted_filling = {value: key for key, value in T.items()}
                    y = inverted_filling.get(min([T.get(alpha) for alpha in candidates_for_y]))

                    output.update({x : output.get(y)})
                    output.update({y : 0})

                    if doublecheck:
                    assert output in standard_tableaux(skew_shape(output)), 'NOT a standard tableau'

                    x = y

                    candidates_for_y = [alpha for alpha in skew_shape(output) if alpha in [ambient_poset.unwrap(beta) for beta in ambient_poset.upper_covers(x)]]

                return output


            # checking if the undelying skew shape is straight
            def is_straight_shape(T):

                for shape in straight_shapes:
                    if set(shape) == set(skew_shape(T)):
                        return True

                else: return False


            # if the undelying skew shape is straight, returning this straight shape
            def straight_shape(T):

                assert is_straight_shape(T), 'T is not of straight shape'

                for shape in straight_shapes:
                    if set(shape) == set(skew_shape(T)):
                        return shape


            def rectification(T):

                if doublecheck:
                assert T in standard_tableaux(skew_shape(T)), 'NOT a standard tableau'

                if is_straight_shape(T) == True:
                    return T

                else:
                    return rectification(jeu_de_taquin(T,list_of_allowed_x(T)[-1]))


            def standard_tableaux(S):

                output = []

                TT = dict([tuple([alpha,0]) for alpha in [ambient_poset.unwrap(item) for item in ambient_poset.list()]])

                for item in ambient_poset.subposet(S).linear_extensions():
                    T = dict([tuple([item.to_poset().unwrap(item[i]), i+1]) for i in range(len(S))])
                    TT.update(T)
                    output.append(TT.copy())
                return output


            # Here we are starting to compute the LR coefficient
            result = 0

            # fixing the standard tableau Tv of shape schubert_to_shape(v)
            Tv = standard_tableaux(schubert_to_shape(v))[0]

            # looping over the standard tableaux of shape schubert_to_shape(v)\schubert_to_shape(u)
            for S in standard_tableaux([alpha for alpha in schubert_to_shape(w) if alpha not in schubert_to_shape(u)]):
                if rectification(S) == Tv:
                    result = result + 1

            return result


    def is_minuscule_element(self, w):

        assert w in self.schubert_basis

        word = w.reduced_word()
        weight = self.root_system.weight_lattice().fundamental_weight(self.parabolic[0])

        return all(self.root_system.weight_lattice().weyl_group().from_reduced_word(word[i:]).action(weight) == self.root_system.weight_lattice().weyl_group().from_reduced_word(word[i+1:]).action(weight) - self.root_system.weight_lattice().simple_root(word[i]) for i in range(len(word)))

    def is_cominuscule_element(self, w):

        assert w in self.schubert_basis

        word = w.reduced_word()

        if self.root_system.cartan_type().type() == 'C':
            L = RootSystem(['B', self.root_system.cartan_type().rank()]).weight_lattice()
            weight = L.fundamental_weight(self.parabolic[0])

            return all(L.weyl_group().from_reduced_word(word[i:]).action(weight) == L.weyl_group().from_reduced_word(word[i+1:]).action(weight) - L.simple_root(word[i]) for i in range(len(word)))

        if self.root_system.cartan_type().type() == 'B':
            L = RootSystem(['C', self.root_system.cartan_type().rank()]).weight_lattice()
            weight = L.fundamental_weight(self.parabolic[0])

            return all(L.weyl_group().from_reduced_word(word[i:]).action(weight) == L.weyl_group().from_reduced_word(word[i+1:]).action(weight) - L.simple_root(word[i]) for i in range(len(word)))

        if self.root_system.cartan_type().type() == 'F':
            L = RootSystem(['F', self.root_system.cartan_type().rank()]).weight_lattice()
            weight = L.fundamental_weight(5 - self.parabolic[0])

            newword = [5-i for i in word]

            return all(L.weyl_group().from_reduced_word(newword[i:]).action(weight) == L.weyl_group().from_reduced_word(newword[i+1:]).action(weight) - L.simple_root(newword[i]) for i in range(len(newword)))

        if self.root_system.cartan_type().type() == 'G':
            L = RootSystem(['G', self.root_system.cartan_type().rank()]).weight_lattice()
            weight = L.fundamental_weight(3 - self.parabolic[0])

            newword = [3-i for i in word]

            return all(L.weyl_group().from_reduced_word(newword[i:]).action(weight) == L.weyl_group().from_reduced_word(newword[i+1:]).action(weight) - L.simple_root(newword[i]) for i in range(len(newword)))

        return self.is_minuscule_element(w)


    def poincare_dual(self, element):

        assert element in self.module, 'Input must be an element of the cohomology module'

        # if element is zero we are done
        if element.is_zero():
            return self.module.zero()

        # if element is a sum of at least two monomials we recurse
        if len(element.monomials()) > 1:
            term = element.leading_term()
            return self.poincare_dual(term) + self.poincare_dual(element - term)

        # if element consists of just one monomial, we use the explicit formula
        # for the Weyl group element defining the Poincare dual
        return element.leading_coefficient()*self.module.monomial((self.weyl_group.long_element()*element.leading_support()).coset_representative(self.nonparabolic))


    def is_coadjoint(self):

        assert self.root_system.cartan_type().rank() > 1, 'Rank 1 Dynkin types are not allowed'

        assert self.root_system.cartan_type() not in [CartanType('D2'), CartanType('D3')], 'Dynkin types D2 and D3 are not allowed'

        n = self.root_system.cartan_type().rank()

        # list of coadjoint varieties (assuming the rank n >= 2 and the Dynkin type is not D2 or D3)
        coadjoint = [['A', n, (1, n)], ['B', n, (1,)], ['C', n, (2,)], ['D', n, (2,)], ['E', 6, (2,)], ['E', 7, (1,)], ['E', 8, (8,)], ['F', 4, (4,)], ['G', 2, (2,)]]

        return [self.root_system.cartan_type().type(), self.root_system.cartan_type().rank(), self.parabolic] in coadjoint


    def is_adjoint(self):

        assert self.root_system.cartan_type().rank() > 1, 'Rank 1 Dynkin types are not allowed'

        assert self.root_system.cartan_type() not in [CartanType('D2'), CartanType('D3')], 'Dynkin types D2 and D3 are not allowed'

        n = self.root_system.cartan_type().rank()

        # list of adjoint varieties (assuming the rank n >= 2 and the Dynkin type is not D2 or D3)
        adjoint = [['A', n, (1, n)], ['B', n, (2,)], ['C', n, (1,)], ['D', n, (2,)], ['E', 6, (2,)], ['E', 7, (1,)], ['E', 8, (8,)], ['F', 4, (1,)], ['G', 2, (1,)]]

        return [self.root_system.cartan_type().type(), self.root_system.cartan_type().rank(), self.parabolic] in adjoint

    def is_minuscule(self):

        assert self.root_system.cartan_type().rank() > 1, 'Rank 1 Dynkin types are not allowed'

        assert self.root_system.cartan_type() not in [CartanType('D2'), CartanType('D3')], 'Dynkin types D2 and D3 are not allowed'

        n = self.root_system.cartan_type().rank()

        # list of minuscule varieties (assuming the rank n >= 2 and the Dynkin type is not D2 or D3)
        minuscule = [['A', n, (i,)] for i in range(1,n+1)] + [['B', n, (n,)], ['C', n, (1,)], ['D', n, (1,)], ['D', n, (n-1,)], ['D', n, (n,)], ['E', 6, (1,)], ['E', 6, (6,)], ['E', 7, (7,)]]

        return [self.root_system.cartan_type().type(), self.root_system.cartan_type().rank(), self.parabolic] in minuscule


    def is_cominuscule(self):

        assert self.root_system.cartan_type().rank() > 1, 'Rank 1 Dynkin types are not allowed'

        assert self.root_system.cartan_type() not in [CartanType('D2'), CartanType('D3')], 'Dynkin types D2 and D3 are not allowed'

        n = self.root_system.cartan_type().rank()

        # list of minuscule varieties (assuming the rank n >= 2 and the Dynkin type is not D2 or D3)
        cominuscule = [['A', n, (i,)] for i in range(1,n+1)] + [['B', n, (1,)], ['C', n, (n,)], ['D', n, (1,)], ['D', n, (n-1,)], ['D', n, (n,)], ['E', 6, (1,)], ['E', 6, (6,)], ['E', 7, (7,)]]

        return [self.root_system.cartan_type().type(), self.root_system.cartan_type().rank(), self.parabolic] in cominuscule



    # for coadjoint varieties one can reindex Schubert classes by short roots
    def schubert_to_roots(self, input):

        assert self.is_coadjoint() or self.is_adjoint(), 'This variety is neither adjoint nor coadjoint. There is no bijection between Schubert classes and (short/long) short roots.'
        assert input in self.schubert_basis or input in self.root_lattice.roots(), 'Input must be either an element of schubert_basis or a root'

        # defining the highest short root \theta
        short_roots = self.root_lattice.root_poset().subposet([root for root in self.root_lattice.short_roots() if root in self.root_lattice.positive_roots()])
        theta = short_roots.unwrap(short_roots.top())

        if self.is_adjoint():
            # taking theta to be the highest root
            theta = self.root_lattice.highest_root()

        if self.is_coadjoint() and not self.is_adjoint():
            # taking theta to be the highest short root
            short_roots = self.root_lattice.root_poset().subposet([root for root in self.root_lattice.short_roots() if root in self.root_lattice.positive_roots()])
            theta = short_roots.unwrap(short_roots.top())

        schubert_to_roots = dict([tuple([w,w.action(theta)]) for w in self.schubert_basis])
        roots_to_schubert = dict([tuple([w.action(theta),w]) for w in self.schubert_basis])

        if input in self.schubert_basis:
            return schubert_to_roots.get(input)

        if input in self.root_lattice.roots():
            return roots_to_schubert.get(input)

    def to_roots(self, element):

        # check input
        # make sure it is simly laced and adjoint variety

        if element.is_zero():
            return {}

        if len(element.monomials()) > 1:
            term = element.leading_term()
            return {**self.to_roots(element - term), **self.to_roots(term)}

        return {tuple(self.schubert_to_roots(element.leading_support()).dense_coefficient_list()) : element.leading_coefficient()}

    def to_schubert(self, input_dict):

        # check input
        # make sure it is simly laced and adjoint variety

        output = self.module.zero()

        for item in input_dict:
            output = output + input_dict.get(item)*self.module.monomial(self.schubert_to_roots(sum(item[i]*self.root_lattice.simple_root(i+1) for i in range(len(item)))))

        return output

    # computing the preimage under the multiplication by the hyperplane class
    # input must be homogeneous
    # only maximal parabolics are allowed at the moment
    def inverse_lefschetz_map(self, element, style = 'chaput-perrin', doublecheck = False):

        assert len(self.parabolic) == 1, 'The parabolic subgroup is not maximal'

        hyperplane_class = self.module.monomial(self.weyl_group.from_reduced_word([self.parabolic[0]]))

        assert all(monomial.leading_support().length() == element.leading_monomial().leading_support().length() for monomial in element.monomials()), 'Input is not homogenous'

        # multiplication by the hyperplane class goes from subspace_A to subspace_B
        subspace_A = [w for w in self.schubert_basis if w.length() == element.leading_support().length() - 1]
        subspace_B = [w for w in self.schubert_basis if w.length() == element.leading_support().length()]

        # matrix of multiplication by the hyperplane class in the Schubert basis
        L = matrix(QQ, len(subspace_B), len(subspace_A))

        assert L.right_kernel().dimension() != 0, 'Multiplication by the hyperplane class has non-trivial kernel'

        for w in subspace_A:
            product = self.cup_product(self.module.monomial(w), hyperplane_class, style, doublecheck)
            for v in subspace_B:
                L[subspace_B.index(v), subspace_A.index(w)] = product.monomial_coefficients().get(v)

        # image of L as a vectorspace
        image = span(L.columns(),QQ)

        # converting input into a matrix
        element_to_matrix = matrix(QQ, len(subspace_B), 1)
        for v in subspace_B:
            element_to_matrix[subspace_B.index(v), 0] = element.monomial_coefficients().get(v)

        # base change matrix between the basis of image induced by subspace_A and its basis given by Sage
        P = matrix(QQ, len(subspace_A), len(subspace_A))

        for i in range(len(subspace_A)):
            for j in range(len(subspace_A)):
                P[j,i] = image.coordinates(L.column(i))[j]

        output = self.module.zero()

        for w in subspace_A:
            output = output + (P^-1*vector(image.coordinates(element_to_matrix.column(0))))[subspace_A.index(w)]*self.module.monomial(w)

        return output


# precomputed Schubert bases for complicated examples
precomputed = dict()

precomputed["D6"] = dict()

precomputed["D6"][(6,)] = [
[],
[6],
[4, 6],
[3, 4, 6],
[5, 4, 6],
[2, 3, 4, 6],
[5, 3, 4, 6],
[4, 5, 3, 4, 6],
[1, 2, 3, 4, 6],
[5, 2, 3, 4, 6],
[4, 5, 2, 3, 4, 6],
[6, 4, 5, 3, 4, 6],
[5, 1, 2, 3, 4, 6],
[4, 5, 1, 2, 3, 4, 6],
[6, 4, 5, 2, 3, 4, 6],
[3, 4, 5, 2, 3, 4, 6],
[6, 4, 5, 1, 2, 3, 4, 6],
[3, 4, 5, 1, 2, 3, 4, 6],
[6, 3, 4, 5, 2, 3, 4, 6],
[6, 3, 4, 5, 1, 2, 3, 4, 6],
[4, 6, 3, 4, 5, 2, 3, 4, 6],
[2, 3, 4, 5, 1, 2, 3, 4, 6],
[4, 6, 3, 4, 5, 1, 2, 3, 4, 6],
[5, 4, 6, 3, 4, 5, 2, 3, 4, 6],
[6, 2, 3, 4, 5, 1, 2, 3, 4, 6],
[5, 4, 6, 3, 4, 5, 1, 2, 3, 4, 6],
[4, 6, 2, 3, 4, 5, 1, 2, 3, 4, 6],
[3, 4, 6, 2, 3, 4, 5, 1, 2, 3, 4, 6],
[5, 4, 6, 2, 3, 4, 5, 1, 2, 3, 4, 6],
[5, 3, 4, 6, 2, 3, 4, 5, 1, 2, 3, 4, 6],
[4, 5, 3, 4, 6, 2, 3, 4, 5, 1, 2, 3, 4, 6],
[6, 4, 5, 3, 4, 6, 2, 3, 4, 5, 1, 2, 3, 4, 6]
]

precomputed["E6"] = dict()

precomputed["E6"][(1,)] = [
[],
[1],
[3, 1],
[4, 3, 1],
[2, 4, 3, 1],
[5, 4, 3, 1],
[5, 2, 4, 3, 1],
[6, 5, 4, 3, 1],
[4, 5, 2, 4, 3, 1],
[6, 5, 2, 4, 3, 1],
[3, 4, 5, 2, 4, 3, 1],
[6, 4, 5, 2, 4, 3, 1],
[5, 6, 4, 5, 2, 4, 3, 1],
[1, 3, 4, 5, 2, 4, 3, 1],
[6, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 3, 4, 5, 2, 4, 3, 1],
[6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1]
]

precomputed["E6"][(2,)] = [
[],
[2],
[4, 2],
[3, 4, 2],
[5, 4, 2],
[1, 3, 4, 2],
[5, 3, 4, 2],
[6, 5, 4, 2],
[4, 5, 3, 4, 2],
[5, 1, 3, 4, 2],
[6, 5, 3, 4, 2],
[4, 5, 1, 3, 4, 2],
[2, 4, 5, 3, 4, 2],
[6, 5, 1, 3, 4, 2],
[6, 4, 5, 3, 4, 2],
[2, 4, 5, 1, 3, 4, 2],
[5, 6, 4, 5, 3, 4, 2],
[3, 4, 5, 1, 3, 4, 2],
[6, 4, 5, 1, 3, 4, 2],
[6, 2, 4, 5, 3, 4, 2],
[5, 6, 4, 5, 1, 3, 4, 2],
[5, 6, 2, 4, 5, 3, 4, 2],
[3, 2, 4, 5, 1, 3, 4, 2],
[6, 2, 4, 5, 1, 3, 4, 2],
[6, 3, 4, 5, 1, 3, 4, 2],
[4, 5, 6, 2, 4, 5, 3, 4, 2],
[5, 6, 2, 4, 5, 1, 3, 4, 2],
[5, 6, 3, 4, 5, 1, 3, 4, 2],
[4, 3, 2, 4, 5, 1, 3, 4, 2],
[6, 3, 2, 4, 5, 1, 3, 4, 2],
[3, 4, 5, 6, 2, 4, 5, 3, 4, 2],
[4, 5, 6, 2, 4, 5, 1, 3, 4, 2],
[5, 6, 3, 2, 4, 5, 1, 3, 4, 2],
[5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[4, 5, 6, 3, 4, 5, 1, 3, 4, 2],
[6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 2],
[3, 4, 5, 6, 2, 4, 5, 1, 3, 4, 2],
[4, 5, 6, 3, 2, 4, 5, 1, 3, 4, 2],
[2, 4, 5, 6, 3, 4, 5, 1, 3, 4, 2],
[5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[1, 3, 4, 5, 6, 2, 4, 5, 1, 3, 4, 2],
[3, 4, 5, 6, 3, 2, 4, 5, 1, 3, 4, 2],
[4, 5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[2, 4, 5, 6, 3, 2, 4, 5, 1, 3, 4, 2],
[3, 4, 5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[1, 3, 4, 5, 6, 3, 2, 4, 5, 1, 3, 4, 2],
[3, 2, 4, 5, 6, 3, 2, 4, 5, 1, 3, 4, 2],
[2, 4, 5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[3, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[1, 3, 4, 5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[3, 2, 4, 5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[1, 3, 2, 4, 5, 6, 3, 2, 4, 5, 1, 3, 4, 2],
[2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[1, 3, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[4, 3, 2, 4, 5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[1, 3, 2, 4, 5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[4, 1, 3, 2, 4, 5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[1, 3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[4, 3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[5, 4, 3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[3, 4, 1, 3, 2, 4, 5, 6, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[4, 1, 3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[5, 4, 1, 3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[3, 4, 1, 3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[5, 3, 4, 1, 3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2],
[2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 5, 4, 3, 2, 4, 5, 1, 3, 4, 2]
]

precomputed["E7"] = dict()

precomputed["E7"][(1,)] = [
[],
[1],
[3, 1],
[4, 3, 1],
[2, 4, 3, 1],
[5, 4, 3, 1],
[5, 2, 4, 3, 1],
[6, 5, 4, 3, 1],
[4, 5, 2, 4, 3, 1],
[6, 5, 2, 4, 3, 1],
[7, 6, 5, 4, 3, 1],
[3, 4, 5, 2, 4, 3, 1],
[7, 6, 5, 2, 4, 3, 1],
[6, 4, 5, 2, 4, 3, 1],
[1, 3, 4, 5, 2, 4, 3, 1],
[6, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 4, 5, 2, 4, 3, 1],
[7, 6, 4, 5, 2, 4, 3, 1],
[7, 6, 3, 4, 5, 2, 4, 3, 1],
[6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 3, 4, 5, 2, 4, 3, 1],
[7, 5, 6, 4, 5, 2, 4, 3, 1],
[7, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[7, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 5, 6, 4, 5, 2, 4, 3, 1],
[7, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[7, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[7, 2, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[7, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[7, 3, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 7, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[7, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 2, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[7, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 3, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 7, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 7, 2, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 7, 3, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 7, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 7, 2, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 7, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 7, 3, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 7, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 5, 6, 7, 2, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 4, 5, 6, 7, 2, 4, 5, 6, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 6, 7, 3, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 7, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 5, 6, 7, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 4, 5, 6, 7, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 6, 7, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 5, 6, 7, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 4, 5, 6, 7, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 2, 4, 5, 6, 7, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 2, 4, 5, 6, 7, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 4, 5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 2, 4, 5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 2, 4, 5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 3, 2, 4, 5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 1, 3, 2, 4, 5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 1, 3, 2, 4, 5, 6, 7, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 1, 3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 4, 3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 1, 3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 4, 1, 3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 4, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 5, 4, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 5, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1],
[1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 6, 5, 4, 3, 2, 4, 5, 6, 1, 3, 4, 5, 2, 4, 3, 1]
]

precomputed["E7"][(7,)] = [
[],
[7],
[6, 7],
[5, 6, 7],
[4, 5, 6, 7],
[3, 4, 5, 6, 7],
[2, 4, 5, 6, 7],
[1, 3, 4, 5, 6, 7],
[3, 2, 4, 5, 6, 7],
[4, 3, 2, 4, 5, 6, 7],
[1, 3, 2, 4, 5, 6, 7],
[5, 4, 3, 2, 4, 5, 6, 7],
[4, 1, 3, 2, 4, 5, 6, 7],
[3, 4, 1, 3, 2, 4, 5, 6, 7],
[5, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 5, 4, 3, 2, 4, 5, 6, 7],
[5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 5, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 6, 5, 4, 3, 2, 4, 5, 6, 7],
[6, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 6, 5, 4, 1, 3, 2, 4, 5, 6, 7],
[2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 6, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 7, 5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 7, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[5, 6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[3, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7],
[7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7]
]

precomputed["E8"] = dict()

precomputed["E8"][(8,)] = [
[],
[8],
[7, 8],
[6, 7, 8],
[5, 6, 7, 8],
[4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 7, 8],
[3, 2, 4, 5, 6, 7, 8],
[1, 3, 2, 4, 5, 6, 7, 8],
[4, 3, 2, 4, 5, 6, 7, 8],
[4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 4, 3, 2, 4, 5, 6, 7, 8],
[5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 5, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 6, 5, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 6, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 6, 7, 5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 6, 7, 5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 6, 7, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 6, 7, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 5, 6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 5, 6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 5, 6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 3, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 3, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 3, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 8, 2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 3, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 8, 2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 8, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 8, 3, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 7, 8, 2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 8, 3, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 8, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 7, 8, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 7, 8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 2, 4, 5, 6, 7, 8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 2, 4, 5, 6, 7, 8, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 2, 4, 5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 2, 4, 5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 3, 2, 4, 5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 1, 3, 2, 4, 5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 1, 3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 1, 3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 4, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 4, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 5, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 5, 6, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8],
[8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 4, 5, 6, 7, 1, 3, 4, 5, 6, 2, 4, 5, 3, 4, 1, 3, 2, 4, 5, 6, 7, 8]
]
